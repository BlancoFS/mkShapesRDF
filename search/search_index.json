{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to mkShapesRDF Installation Git clone the project and work with the v0.0.1 git clone https://github.com/giorgiopizz/mkShapesRDF.git git checkout v0.0.1 Lxplus is currently the suggested machine to work with. In general one should need cvmfs with sft.cern.ch and cms.cern.ch . In order to install the package it's first necessary to source the right LCG release: source /cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh now the right python version (3.9) and it's bindings with ROOT are setup. It's highly reccomended to create a virtual environment for the installation: python -m venv --system-site-packages myenv and of course activate it: source myenv/bin/activate Now you can proceed to the simple installation: pip install -e . Now to work with mkShapes.processor one should also install correctionlib and compile it: python -m pip install --no-binary=correctionlib correctionlib From now on, when you will login again on lxplus you will just have to run the setup command: . ./start.sh Configure the configuration folder (e.g. examples/2016Real ): Documentation on the configuration folder structure at this page Compile the configuration folder: Inside a configuration folder one can compile it into .json and .pkl . The compiled version are used across all the operating modes of mkShapesRDF mkShapesRDF -c 1 Run the analysis: mkShapesRDF -o 0 -f . -b 1 -o indicates the operationMode: - 0 run analysis - 1 check batch output and errs - 2 merge root files - 3 plot them For the provided example (2016Real) it's estimated an execution time of ~ 10 mins running on lxbatch (condor on lxplus) @ CERN when disabling nuisances. It's highly recommended to limit input ROOT files at the first run to check for errors. The following command will only take 1 event for each sample type: mkShapesRDF -o 0 -f . -l 1 Check for errors After all the jobs finished (or most of them did) you can run mkShapesRDF -o 1 -f . to know which jobs failed and why. One can resubmit failed jobs with mkShapesRDF -o 1 -f . -r 1 . While if one wants to resubmit jobs that are still running, the option -r 2 should be used. Merge files If all the jobs succeeded run the merger with the option: mkShapesRDF -o 2 -f . Plots Plot with mkShapesRDF -o 3 -f . which will create the plots to the specified paths provided in configuration.py","title":"Home"},{"location":"#welcome-to-mkshapesrdf","text":"","title":"Welcome to mkShapesRDF"},{"location":"#installation","text":"Git clone the project and work with the v0.0.1 git clone https://github.com/giorgiopizz/mkShapesRDF.git git checkout v0.0.1 Lxplus is currently the suggested machine to work with. In general one should need cvmfs with sft.cern.ch and cms.cern.ch . In order to install the package it's first necessary to source the right LCG release: source /cvmfs/sft.cern.ch/lcg/views/LCG_103/x86_64-centos7-gcc11-opt/setup.sh now the right python version (3.9) and it's bindings with ROOT are setup. It's highly reccomended to create a virtual environment for the installation: python -m venv --system-site-packages myenv and of course activate it: source myenv/bin/activate Now you can proceed to the simple installation: pip install -e . Now to work with mkShapes.processor one should also install correctionlib and compile it: python -m pip install --no-binary=correctionlib correctionlib From now on, when you will login again on lxplus you will just have to run the setup command: . ./start.sh","title":"Installation"},{"location":"#configure-the-configuration-folder-eg-examples2016real","text":"Documentation on the configuration folder structure at this page","title":"Configure the configuration folder (e.g. examples/2016Real):"},{"location":"#compile-the-configuration-folder","text":"Inside a configuration folder one can compile it into .json and .pkl . The compiled version are used across all the operating modes of mkShapesRDF mkShapesRDF -c 1","title":"Compile the configuration folder:"},{"location":"#run-the-analysis","text":"mkShapesRDF -o 0 -f . -b 1 -o indicates the operationMode: - 0 run analysis - 1 check batch output and errs - 2 merge root files - 3 plot them For the provided example (2016Real) it's estimated an execution time of ~ 10 mins running on lxbatch (condor on lxplus) @ CERN when disabling nuisances. It's highly recommended to limit input ROOT files at the first run to check for errors. The following command will only take 1 event for each sample type: mkShapesRDF -o 0 -f . -l 1","title":"Run the analysis:"},{"location":"#check-for-errors","text":"After all the jobs finished (or most of them did) you can run mkShapesRDF -o 1 -f . to know which jobs failed and why. One can resubmit failed jobs with mkShapesRDF -o 1 -f . -r 1 . While if one wants to resubmit jobs that are still running, the option -r 2 should be used.","title":"Check for errors"},{"location":"#merge-files","text":"If all the jobs succeeded run the merger with the option: mkShapesRDF -o 2 -f .","title":"Merge files"},{"location":"#plots","text":"Plot with mkShapesRDF -o 3 -f . which will create the plots to the specified paths provided in configuration.py","title":"Plots"},{"location":"config/","text":"The configuration.py file It's the only necessary python file, it has to include the following variables tag runnerFile ouputFile outputFolder batchFolder configFolder imports filesToExec varsToKeep batchVars lumi and when running the plotter the required variables are plotPath minRatio maxRatio All the other python files to be executed have to be included in the filesToExec list. While the variables defined that have to be digested by runner have to be provided in varsToKeep","title":"Configuration Folder Structure"},{"location":"config/#the-configurationpy-file","text":"It's the only necessary python file, it has to include the following variables tag runnerFile ouputFile outputFolder batchFolder configFolder imports filesToExec varsToKeep batchVars lumi and when running the plotter the required variables are plotPath minRatio maxRatio All the other python files to be executed have to be included in the filesToExec list. While the variables defined that have to be digested by runner have to be provided in varsToKeep","title":"The configuration.py file"},{"location":"runner/","text":"Documentation for Runner mkShapesRDF . shapeAnalysis . runner . RunAnalysis . splitSamples ( samples , useFilesPerJob = True ) staticmethod static methods, takes a dictionary of samples and split them based on their weights and max num. of files Parameters: Name Type Description Default samples dict dictionary of samples required useFilesPerJob bool if you want to further split the samples based on max num. of files. Defaults to True. True Returns: Type Description list of tuples each tuple will have a lenght of 5 (6 if subsamples are present), where the first element is the name of the sample, the second the list of files, the third the weight, and the fourth the index of this tuple compared to the other tuples of the same sample type, the fifth will be the isData flag (True if the sample is data, False otherwise). If subsamples are present, the sixth element will be the dict of subsamples mkShapesRDF . shapeAnalysis . runner . RunAnalysis . __init__ ( samples , aliases , variables , cuts , nuisances , lumi , limit =- 1 , outputFileMap = 'output.root' ) Stores arguments in the class attributes and creates all the RDataFrame objects Parameters: Name Type Description Default samples list of tuples same type as the return of the splitSamples method required aliases dict dict of aliases required variables dict dict of variables required cuts dict dict of cuts, contains two keys (preselections: str, cuts: dict) required nuisances dict dict of nuisances required lumi float lumi in fb-1 required limit int limit of events to be processed. Defaults to -1. -1 outputFileMap str full path + filename of the output root file. Defaults to 'output.root'. 'output.root' Returns: Type Description void void The main function: mkShapesRDF . shapeAnalysis . runner . RunAnalysis . run () Runs the analysis, first loads the aliases, filters with preselection the many dfs, loads systematics loads variables, creates the results dict, splits the samples, creates the cuts/var histos, runs the analysis and saves results. Runner should be provided with samples, aliases and all the other configuration dictionaries. It will determine how to split the sample splitting and merging of results","title":"Runner"},{"location":"runner/#documentation-for-runner","text":"","title":"Documentation for Runner"},{"location":"runner/#mkShapesRDF.shapeAnalysis.runner.RunAnalysis.splitSamples","text":"static methods, takes a dictionary of samples and split them based on their weights and max num. of files Parameters: Name Type Description Default samples dict dictionary of samples required useFilesPerJob bool if you want to further split the samples based on max num. of files. Defaults to True. True Returns: Type Description list of tuples each tuple will have a lenght of 5 (6 if subsamples are present), where the first element is the name of the sample, the second the list of files, the third the weight, and the fourth the index of this tuple compared to the other tuples of the same sample type, the fifth will be the isData flag (True if the sample is data, False otherwise). If subsamples are present, the sixth element will be the dict of subsamples","title":"splitSamples()"},{"location":"runner/#mkShapesRDF.shapeAnalysis.runner.RunAnalysis.__init__","text":"Stores arguments in the class attributes and creates all the RDataFrame objects Parameters: Name Type Description Default samples list of tuples same type as the return of the splitSamples method required aliases dict dict of aliases required variables dict dict of variables required cuts dict dict of cuts, contains two keys (preselections: str, cuts: dict) required nuisances dict dict of nuisances required lumi float lumi in fb-1 required limit int limit of events to be processed. Defaults to -1. -1 outputFileMap str full path + filename of the output root file. Defaults to 'output.root'. 'output.root' Returns: Type Description void void","title":"__init__()"},{"location":"runner/#the-main-function","text":"","title":"The main function:"},{"location":"runner/#mkShapesRDF.shapeAnalysis.runner.RunAnalysis.run","text":"Runs the analysis, first loads the aliases, filters with preselection the many dfs, loads systematics loads variables, creates the results dict, splits the samples, creates the cuts/var histos, runs the analysis and saves results. Runner should be provided with samples, aliases and all the other configuration dictionaries. It will determine how to split the sample splitting and merging of results","title":"run()"}]}